name: Deploy Worker (no environments)

on:
  push:
    branches: [ main ]         # change if needed
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Wrangler v4
        run: npm i -g wrangler@4

      # Optional: first-time only. Leave disabled unless you need it.
      - name: (Optional) Create D1 database
        if: ${{ false }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: wrangler d1 create hotdog-db

      - name: Apply migrations to remote D1
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: wrangler d1 execute hotdog-db --file=./migrations/0001_init.sql --remote

      - name: Push Worker secrets (non-interactive)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        shell: bash
        run: |
          set -e
          put () {
            local key="$1"; local val="$2"
            [ -z "$val" ] && { echo "Skipping $key (no value)"; return 0; }
            if wrangler secret list | grep -q "\"name\": \"$key\""; then
              echo "$key already set; skipping."
            else
              printf '%s' "$val" | wrangler secret put "$key"
            fi
          }
          put SLACK_SIGNING_SECRET "$SLACK_SIGNING_SECRET"
          put SLACK_BOT_TOKEN "$SLACK_BOT_TOKEN"

      - name: Deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: wrangler deploy
